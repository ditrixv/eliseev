fake data
http://127.0.0.1:8000/verify/ffeb4b36-9448-427b-8fee-0bbbb846d851

$factory->define(User::class, function (Faker $faker) {
    $active = $faker->boolean;
    return [
        'name' => $faker->name,
        'email' => $faker->unique()->safeEmail,
        'password' => '$2y$10$TKh8H1.PfQx37YgCzwiKb.KjNyWgaHb9cbcoQgdIVFlYg7B77UdFm', // secret
        'remember_token' => str_random(10),
        'status' => $active? User::STATUS_ACTIVE : User::STATUS_WAIT,
//        'verify_token' => $active? Str::uuid() : null,
//        'role' => $active ?
    ];
});
================================================================================
1:12  программируем собств консольную команду (на примере верификации юзера через php artisan)
цель. php artisan user:verify ditrixv@ukr.net

php artisan make:command User/VerifyCommand
----------------------------------------
роли и доступы

admin manager user

class SomeController extends Controller

public __constructor() {
    ...
    middleware('can:admin')

}

public index(){
    $user = Auth::user();
    if($user->role !== 'admin'){
        abort(403)
    }
}


------------------------
Сайт_на_Laravel_08.03.2018_19-09-08.mp4

доступ ЧЕРЕЗ РОЛИ
но если ролей много, а комбинаций бесчисленное ко-во....
if(user){}
if(usew || moderator || admin){}
if(moderator||admin){}
.....



достуа ЧЕРЕЗ РАЗРЕШЕНИЯ
             user  moderator admin
user.index    +        +       +
user.edit              +       +
user.delete                    +

if(user.index) {...}
if(user.edit) {...}
if(user.deleted)

при доступе через роли менять нужно каждый if
при доступе через разрешения меняем конфиг разрешений
----------------

03:08 управление ролями
3:20 фильтрация
3:29 роли-функционал
-------
на примере
файл провайдера
  App/Providers/AuthServiceProvider

class AuthServiceProvider extends ServiceProvider
{
     */
    protected $policies = [
    ];
    public function boot()
    {
        $this->registerPolicies();
        Gate::define('admin-panel',function (User $user) {
            return $user->isAdmin();
        });
        Gate::define('manager-panel',function (User $user) {
            return $user->isAdmin() || user->isManager();
        });
        Gate::define('user-panel',function (User $user) {
            return $user->isAdmin() || user->isManager() || user->isUser();
        });
    }
}

в контроллере
class UserController extends Controller
{
	public function __construct(){
        $this->middleware('can:user-panel');    }
}

в блейде
    @can('admin-panel')
        <form method="post" action="{{ route('admin.users.update', $user->id) }}" class="mr-1">
            @csrf
            @method('DELETE')
            <button class="btn btn-danger">Delete</button>
        </form>
    @endcan

пока гейтов мало -  в коде только @can @endcan
============================================================
регионы
id
parent_id
name
slug (униклен в рамках parent_id)

    public function up()
    {
        Schema::create('regions', function (Blueprint $table) {
            $table->increments('id');
            $table->string('name')->index();
            $table->string('slug');

            $table->integer('parent_id')->nullable()->references('id')->on('regions')->onDelete('CASCADE');

            $table->timestamps();

            $table->unique(['parent_id','slug']);  // умное ограничение (только на для parent_id !== NULL)
            $table->unique(['parent_id','name']);
        });
    }


создание 3-x этажей регионов
    public function run()
    {
        // создание 3-х этажей региогов
        factory(Region::class,10)
            ->create()
                ->each(
                    function (Region $region)
                    {
                        $region->children()->saveMany(
                            factory(Region::class,random_int(2,10))
                                ->create()
                                    ->each(
                                        function (Region $region)
                                        {
                                            $region->children()->saveMany(
                                                factory(Region::class,random_int(2,10))
                                                    ->make());
                                        }));
                    });
    }
    #php artisan db:seed --class=RegionTableSeeder
